{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","js/game.ts","../common/Classes/Communicator.ts","../common/Classes/Entity.ts","../common/Classes/Game.ts","../common/Classes/Hitbox.ts","../common/Classes/Input.ts","../common/Classes/Model.ts","../common/Classes/Rectangle.ts","../common/Classes/Render.ts","../common/Classes/Vector.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Game_1","Communicator_1","Render_1","Input_1","CONFIG","gameLoopInterval","map","height","width","textureBasepath","textures","dirt","texture","w","h","spriteMax","house","duck","models","solid","static","hitbox","x","y","game","default","performance","now","communicator","input","document","addEventListener","body","renderHitbox","player","Vector_1","Communicator","_this","this","websocket","WebSocket","onopen","send","onerror","error","console","log","onmessage","data","JSON","parse","action","updateMovement","params","loadStaticElements","loadMovingElements","prototype","_a","arrayPosition","force","entitys","param","loadMap","sendInput","v","stringify","Object","defineProperty","value","Entity","_b","positionX","_c","positionY","model","position","velocity","renderTexture","ctx","undefined","lastSprite","rad","Math","atan2","round","PI","direction","speed","save","translate","drawImage","textureSize","floor","restore","Model_1","Entity_1","Game","config","timeFunction","name","addEntity","expectedInterval","setTimeout","gameLoop","bind","entity","push","specialInput","overtime","overtimeError","delay","acceleration","scale","add","collision","entity2","checkCollision","exportMap","returnValue","Rectangle_1","Hitbox","hitboxconf","hitboxes","collisionBox","getCollisionBox","origin","eOrigin","eHitbox","max","biggest","min","smalest","Input","keys","d","ArrowUp","ArrowLeft","ArrowDown","ArrowRigth","__proto__","window","hasOwnProperty","key","preventDefault","Hitbox_1","Model","staticElem","Rectangle","_d","_e","originRect","rect","rectMin","thisMin","drawRect","fillStyle","fillRect","Render","canvasParent","debugging","canvas","createElement","documentElement","clientHeight","clientWidth","appendChild","style","imageRendering","getContext","name_1","img","Image","src","setInterval","render","clearRect","i_1","V","subtract","dot","cross","rotate","angle","vector","x_prime","cos","sin","y_prime"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Game from \"./../../common/Classes/Game\";\nimport Communicator from \"./../../common/Classes/Communicator\";\nimport Render from \"./../../common/Classes/Render\";\nimport Input from \"./../../common/Classes/Input\";\n\n'use strict'\n// IDEA: Circle collision\n// IDEA: z-index\n// IDEA: collision side\n// IDEA: Pathfinding\n// IDEA: sprites\n// IDEA: Players controller\n// IDEA: collsion speedup (AABB detection with outer part\n// FIXME: Outer colisionbox\n\nconst CONFIG = {\n  gameLoopInterval: 16,\n\n  map: {\n    height: 1000,\n    width: 1000,\n  },\n\n  textureBasepath: 'assets/images/',\n  textures: {\n    'dirt': {\n      texture: 'dirt.png',\n      w: 16,\n      h: 16,\n      spriteMax: 5,\n    },\n    'house': {\n      texture: 'house.png',\n      w: 254,\n      h: 198,\n      spriteMax: 1,\n    },\n    'duck': {\n      texture: 'player.png',\n      w: 16,\n      h: 18,\n      spriteMax: 4,\n    },\n  },\n\n  models: {\n    'dirt': {\n      solid: true,\n      static: false,\n      hitbox: [{\n        x: 0,\n        y: 0,\n        w: 16,\n        h: 16,\n      }],\n    },\n    'house': {\n      solid: true,\n      static: true,\n      hitbox: [{\n        x: 0,\n        y: 0,\n        w: 254,\n        h: 198,\n      }],\n    },\n    'duck': {\n      solid: true,\n      static: false,\n      hitbox: [{\n        x: 0,\n        y: 0,\n        w: 18,\n        h: 18,\n      }],\n    }\n  },\n}\n\n\nlet game = new Game(CONFIG, performance.now);\nlet communicator = new Communicator(game);\nlet input = new Input(game, communicator);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  let render = new Render(game, document.body, {\n    renderHitbox: true\n  }, input.player);\n});\n","import Game from \"./Game\";\nimport V from \"./Vector\";\n/**\n * Errorhandling for Client Server has its own...\n * Websocket here\n *\n */\nclass Communicator {\n  websocket: WebSocket;\n  game: Game;\n\n  constructor(game) {\n    this.websocket = new WebSocket('ws://localhost');\n\n    this.websocket.onopen = () => {\n      this.websocket.send('Ping');\n    };\n\n    // Log errors\n    this.websocket.onerror = (error) => {\n      console.log('WebSocket Error ' + error);\n    };\n\n    // Log messages from the server\n    this.websocket.onmessage = (e) => {\n      // console.log(e.data);\n      try {\n        let data = JSON.parse(e.data);\n        switch (data.action) {\n          case \"updateMovement\":\n            this.updateMovement(data.params);\n            break;\n          case \"loadStaticElements\":\n            this.loadStaticElements(data.params);\n            break;\n          case \"loadMovingElements\":\n            this.loadMovingElements(data.params);\n            break;\n          }\n      } catch (e) {\n        console.error(e);\n      }\n\n\n    };\n\n\n\n    this.game = game;\n    // game.__proto__.overtimeError = (overtime) => {\n    //   // console.log(overtime);\n    //   // console.log(this);\n    //   this.expectedInterval = window.performance.now();\n    //   // this.loadMap();\n    // };\n  }\n\n  /**\n   * sets force to force on arrayPosition\n   * @param {number} arrayPosition - position in Array\n   * @param {vector} force - new Force value\n   */\n  updateMovement({arrayPosition: arrayPosition, force: force}) {\n    this.game.entitys[arrayPosition].force = new V(force);\n    // console.log(this.game.entitys[arrayPosition]);\n  }\n\n  /**\n   * Initialises static Elements which cant move\n   * @param\n   */\n  loadStaticElements(param) {\n\n  }\n\n\n  loadMovingElements(param) {\n\n  }\n\n  loadMap() {\n\n  }\n\n\n\n  sendInput(v) {\n    this.websocket.send(JSON.stringify(v));\n  }\n}\n\nexport default Communicator;\n","import Model from \"./Model\";\nimport V from \"./Vector\";\n\nclass Entity {\n  model: Model;\n  force: V;\n  velocity: V;\n  position: V;\n  lastSprite: number;\n\n  constructor({positionX = 0, positionY = 0, texture = 0, solid = false, static: staticElem = false, model: model}) {\n    // position\n    // left top of hitbox\n    this.position = new V(positionX, positionY);\n\n    // velocity for movement\n    this.velocity = new V(0, 0);\n\n    // pulls into Direction\n    this.force = new V(0, 0);\n\n    // IDEA: z-index\n\n    // Textures and rest is safed in here\n    this.model = model;\n  }\n\n  renderTexture(ctx) {\n    if (this.lastSprite == undefined || this.lastSprite >= this.model.spriteMax) {\n      this.lastSprite = 0;\n    }\n\n    // get direction\n    let rad = Math.atan2(this.velocity.x, this.velocity.y);\n    let a = Math.round(rad * (4 / Math.PI));\n    let direction = (a < -0 ? a * (-1) + 4 : a);\n    let speed = 0;\n    switch (direction) {\n      case 0:\n        speed = this.velocity.y;\n        break;\n      case 1:\n        speed = (this.velocity.x + this.velocity.y) / 2\n        break;\n\n      case 2:\n        speed = this.velocity.x;\n        break;\n\n      case 3:\n        speed = (this.velocity.x + (this.velocity.y * -1)) / 2\n        break;\n\n      case 8:\n      case 4:\n        speed = this.velocity.y * -1\n        break;\n\n      case 5:\n        speed = ((this.velocity.x * -1) + this.velocity.y) / 2\n        break;\n\n      case 6:\n        speed = this.velocity.x * -1\n        break;\n\n      case 7:\n        speed = ((this.velocity.x + this.velocity.y) / 2) * -1\n        break;\n    }\n\n\n    this.lastSprite += speed / 500;\n    // get direction\n    // get speed into direction\n    // Get texture\n    // Add to last sprite\n    // render\n\n    ctx.save();\n\n    // add center to it so it can rotate from center\n    // ctx.translate(this.position.x + this.center.x, this.position.y + this.center.y);\n    ctx.translate(this.position.x, this.position.y);\n    // ctx.rotate(this.angle);\n\n    ctx.drawImage(this.model.texture, this.model.textureSize.x * Math.floor(this.lastSprite), 0, this.model.textureSize.x, this.model.textureSize.y, 0, 0, this.model.textureSize.x, this.model.textureSize.y);\n    // ctx.drawImage(this.texture, 0 - this.center.x, 0 - this.center.y, this.size.x, this.size.y);\n    ctx.restore();\n  }\n}\n\nexport default Entity;\n","import Model from \"./Model\";\nimport Entity from \"./Entity\";\n/**\n * Class for game logic\n * @author Pascal Luginbühl\n * @version none\n */\n\n// needs timerfunction as param... :D\nclass Game {\n  models: Object;\n  config: any;\n  height: number;\n  width: number;\n  entitys: Array<Entity>\n  expectedInterval: number;\n  timeFunction: Function;\n  /** Creates game\n   * @param {object} config - Config file\n   */\n  constructor(config, timeFunction: Function) {\n    this.config = config;\n\n    // Map starting corner left bottom, render left top\n    // IDEA: Chunks for more performence\n\n    this.height = config.map.height;\n    this.width = config.map.width;\n    this.timeFunction = timeFunction;\n\n    this.entitys = [];\n\n\n    this.models = {};\n    for (var name in this.config.models) {\n      this.models[name] = new Model(this.config.models[name]);\n    }\n\n\n    this.addEntity(new Entity({\n      positionX: 300,\n      positionY: 70,\n\n      model: this.models['duck'],\n    }));\n\n    this.addEntity(new Entity({\n      positionX: 0,\n      positionY: 0,\n\n      model: this.models['house'],\n    }));\n\n    this.addEntity(new Entity({\n      positionX: 700,\n      positionY: 700,\n\n      model: this.models['house'],\n    }));\n\n\n    // Timer for gameloop\n    this.expectedInterval = this.timeFunction() + this.config.gameLoopInterval;\n    setTimeout(this.gameLoop.bind(this), this.config.gameLoopInterval);\n  }\n\n\n  addEntity (entity) {\n    this.entitys.push(entity);\n  }\n\n  // catch up loop\n  gameLoop() {\n    // special for communicator and input\n    this.specialInput();\n\n    let overtime = this.timeFunction() - this.expectedInterval;\n\n    if (overtime > this.config.gameLoopInterval) {\n      this.overtimeError(overtime);\n      this.expectedInterval = this.timeFunction();\n      // error, overtime longer then Interval, sync with server...\n    }\n\n    let delay = (overtime + this.config.gameLoopInterval) / 1000;\n    // console.log(delay);\n\n    // physics here\n    for (let i = 0; i < this.entitys.length; i++) {\n      let entity = this.entitys[i];\n      if (!entity.model.static) {\n\n        let acceleration = entity.force.scale(2000);\n        // idk wahts betta\n        // let friction = 0.08;\n        let friction = 0.8;\n        // entity.velocity = entity.velocity.add(acceleration.subtract(entity.velocity.scale(friction)));\n        entity.velocity = entity.velocity.add(acceleration.scale(delay)).scale(.92);\n        // console.log(entity.velocity);\n        let position = entity.position.add(entity.velocity.scale(delay));\n        // let rect = new Rectangle({min: entity.hitbox.min.add(entity.velocity.scale(delay)), max: entity.hitbox.max});\n        // velocity += acceleration * time_step\n        // position += velocity * time_step\n\n        let collision = false;\n\n        // collisions\n        for (let o = 0; o < this.entitys.length; o++) {\n          let entity2 = this.entitys[o];\n          // check collision\n\n          if (entity != entity2 && entity.model.solid && entity2.model.solid) {\n\n            // FIXME: do better physX\n            // Collision detection\n            if (entity.model.hitbox.checkCollision(position, entity2.position, entity2.model.hitbox)) {\n              collision = true;\n            }\n          }\n        }\n\n\n        if (collision) {\n          entity.velocity = entity.velocity.scale(.1);\n        } else {\n          entity.position = position;\n        }\n      }\n    }\n\n\n    this.expectedInterval += this.config.gameLoopInterval;\n    setTimeout(this.gameLoop.bind(this), this.config.gameLoopInterval - overtime);\n  }\n\n  overtimeError(overtime) {\n    console.error(\"overtimeError: \" + overtime);\n  }\n\n  specialInput() {\n\n  }\n\n  exportMap() {\n    let returnValue = [];\n    for (var i = 0; i < this.entitys.length; i++) {\n      let entity = this.entitys[i];\n\n      for (let model in this.models) {\n        if (this.models[model] == entity.model) {\n          returnValue.push({position: entity.position, velocity: entity.velocity, force: entity.force, model: model});\n        }\n      }\n    }\n    return returnValue;\n  }\n}\n\nexport default Game;\n","import V from \"./Vector\";\nimport Rectangle from \"./Rectangle\";\n\nclass Hitbox {\n  hitboxes: Array<Rectangle>;\n  collisionBox: Rectangle;\n\n  constructor(hitboxconf) {\n    this.hitboxes = [];\n    for (let i = 0; i < hitboxconf.length; i++) {\n      this.hitboxes.push(new Rectangle(hitboxconf[i]));\n    }\n\n    this.collisionBox = this.getCollisionBox();\n  }\n\n  checkCollision(origin, eOrigin, eHitbox) {\n    if (this.collisionBox.checkCollision(origin, eOrigin, eHitbox.collisionBox)) {\n      for (let i = 0; i < this.hitboxes.length; i++) {\n        let hitboxes = this.hitboxes[i];\n\n        for (let o = 0; o < eHitbox.hitboxes.length; o++) {\n\n          if (hitboxes.checkCollision(origin, eOrigin, eHitbox.hitboxes[o])) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  getCollisionBox() {\n    let max = new V(0, 0);\n\n    for (let i = 0; i < this.hitboxes.length; i++) {\n      let hitbox = this.hitboxes[i];\n\n      max = max.biggest(hitbox.min.add(hitbox.max));\n    }\n\n    let min = new V(max.x, max.y);\n\n    for (let i = 0; i < this.hitboxes.length; i++) {\n      min = min.smalest(this.hitboxes[i].min);\n    }\n\n    return new Rectangle({min: min, max: max});\n  }\n}\n\nexport default Hitbox;\n","import Game from \"./Game\";\nimport Communicator from \"./Communicator\";\nimport Entity from \"./Entity\";\nimport V from \"./Vector\";\n/**\n * Input for user inputs.\n * Communicator for communicating to WebSocket\n */\nclass Input {\n  game: Game\n  communicator: Communicator;\n  player: Entity;\n  keys: any;\n\n  constructor(game, communicator) {\n    this.game = game;\n    this.communicator = communicator;\n\n    this.player = new Entity({\n      positionX: 300,\n      positionY: 300,\n\n      model: this.game.models['duck'],\n    });\n\n    this.game.addEntity(this.player);\n    console.log(this.player);\n    this.keys = {\n      w: false,\n      a: false,\n      s: false,\n      d: false,\n      ArrowUp: false,\n      ArrowLeft: false,\n      ArrowDown: false,\n      ArrowRigth: false,\n    }\n\n\n    let keys = this.keys;\n    let player = this.player\n    game.__proto__.specialInput = function() {\n      // let v = new V(0, 0);\n      // if (keys.w) {\n      //   v.y-- ;\n      // }\n      // if (keys.a) {\n      //   v.x--;\n      // }\n      // if (keys.s) {\n      //   v.y++;\n      // }\n      // if (keys.d) {\n      //   v.x++;\n      // }\n      // player.force = v;\n    }\n\n    window.addEventListener('keydown', (e) => {\n      if (this.keys.hasOwnProperty(e.key)) {\n        this.keys[e.key] = true;\n        this.player.force = this.direction();\n\n        this.communicator.sendInput({action: \"updateMovement\",  params: {arrayPosition: 3, force: this.direction()}});\n        e.preventDefault();\n      }\n    });\n\n    window.addEventListener('keyup', (e) => {\n      if (this.keys.hasOwnProperty(e.key)) {\n        this.keys[e.key] = false;\n        this.player.force = this.direction();\n\n        this.communicator.sendInput({action: \"updateMovement\",  params: {arrayPosition: 3, force: this.direction()}});\n        e.preventDefault();\n      }\n    });\n  }\n\n  direction() {\n    let v = new V(0, 0);\n    if (this.keys.w) {\n      v.y-- ;\n    }\n    if (this.keys.a) {\n      v.x--;\n    }\n    if (this.keys.s) {\n      v.y++;\n    }\n    if (this.keys.d) {\n      v.x++;\n    }\n    return v;\n  }\n}\nexport default Input;\n","import Hitbox from \"./Hitbox\";\n\nclass Model {\n  solid: boolean;\n  static: boolean;\n  hitbox: Hitbox;\n  spriteMax: number;\n  texture: any;\n  textureSize: any;\n\n  constructor({solid: solid = true, static: staticElem = false, hitbox: hitbox}) {\n    // this.hitbox = [new Rectangle({x: 0, y: 0, w: 10, h: 10})];\n\n\n    // comes to renderengine\n    // IDEA: Also able to set via reference to type\n    // this.texture = texture;\n    // this.textureSize = new V(10, 10);\n\n    // FIXME: Fix inputs from config\n    // parameters\n    this.solid = solid;\n    this.static = staticElem;\n\n    this.hitbox = new Hitbox(hitbox);\n  }\n}\n\nexport default Model;\n","import V from \"./Vector\";\n\nclass Rectangle {\n  max: V;\n  min: V;\n\n  constructor({x: x = 0, y: y = 0, w: w = 0, h: h = 0, min: min, max: max}) {\n    if (min != undefined && max != undefined) {\n      this.min = min;\n      this.max = max;\n    } else {\n      this.min = new V(x, y);\n      this.max = new V(w, h);\n    }\n    // this._rotation = 0;\n    // let rotation = 5;\n    // this.center = new V(0, 0);\n  }\n\n  // get rotation() {\n  //   console.log(rotation, \"asd\");\n  //   return rotation;\n  // }\n\n  // set rotation(rotation) {\n  //   this._rotation = rotation;\n  // }\n\n  checkCollision(origin, originRect, rect) {\n    let rectMin = rect.min.add(originRect);\n\n    // let thisMin = rect.min.add(origin).add(rect.min);\n    let thisMin = this.min.add(origin);\n\n    if (thisMin.x < rectMin.x + rect.max.x && this.max.x + thisMin.x > rectMin.x && thisMin.y < rect.max.y + rectMin.y && this.max.y + thisMin.y > rectMin.y) {\n      return true;\n    }\n    return false;\n  }\n\n  drawRect(position, ctx) {\n    ctx.save();\n\n    // add center to it so it can rotate from center\n    // ctx.translate(this.position.x + this.center.x, this.position.y + this.center.y);\n    position = position.add(this.min);\n    ctx.translate(position.x, position.y);\n    // ctx.rotate(this.angle);\n    ctx.fillStyle = \"rgba(0, 0, 0, .3)\";\n    ctx.fillRect(0, 0, this.max.x, this.max.y);\n\n    // ctx.drawImage(this.texture, 0 - this.center.x, 0 - this.center.y, this.size.x, this.size.y);\n    ctx.restore();\n  };\n}\n\nexport default Rectangle;\n","import Game from \"./Game\";\nimport V from \"./Vector\";\nimport Entity from \"./Entity\";\nimport Rectangle from \"./Rectangle\";\n\n\nclass Render {\n  canvas: any;\n  ctx: CanvasRenderingContext2D;\n  origin: any;\n  game: Game;\n  debugging: any;\n\n\n  constructor(game, canvasParent, debugging, origin) {\n\n    this.canvas = document.createElement('canvas');\n    this.canvas.height = this.canvas.height = document.documentElement.clientHeight;\n    this.canvas.width = this.canvas.width = document.documentElement.clientWidth;\n\n    canvasParent.appendChild(this.canvas);\n\n    this.canvas.style.imageRendering = \"pixelated\";\n\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    this.origin = origin;\n\n    // preload images\n    this.game = game;\n\n    this.debugging = debugging;\n\n\n    for (let name in this.game.models) {\n      let img = new Image();\n      let texture = this.game.config.textures[name];\n\n      img.src = \"assets/images/\" + texture.texture;\n\n      this.game.models[name].spriteMax = texture.spriteMax;\n      this.game.models[name].texture = img;\n      this.game.models[name].textureSize = new V(texture.w, texture.h);\n    }\n\n    window.addEventListener('resize', () => {\n      this.canvas.width = document.documentElement.clientWidth;\n      this.canvas.height = document.documentElement.clientHeight;\n    });\n\n\n\n\n    // this.render();\n    // setTimeout(this.render.bind(this), 1);\n\n    // standard Interval\n    setInterval(this.render.bind(this), Math.round(1000 / 60));\n  }\n\n\n  render() {\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    this.ctx.save();\n    this.ctx.translate(this.origin.position.x * -1 + this.canvas.width/2, this.origin.position.y * -1 + this.canvas.height/2);\n    // Clear old stuff\n\n\n    for (let i = 0; i < this.game.entitys.length; i++) {\n      let entity = this.game.entitys[i];\n\n      entity.renderTexture(this.ctx);\n      for (let i = 0; i < entity.model.hitbox.hitboxes.length; i++) {\n        entity.model.hitbox.hitboxes[i].drawRect(entity.position, this.ctx);\n      }\n    }\n    this.ctx.restore();\n  }\n}\nexport default Render;\n","class V {\n  x: number;\n  y: number;\n\n\n  constructor (x, y?) {\n    if (x instanceof Object) {\n      this.x = Math.round(x.x * 10) / 10;\n      this.y = Math.round(x.y * 10) / 10;\n    } else {\n      this.x = Math.round(x * 10) / 10;\n      this.y = Math.round(y * 10) / 10;\n    }\n  }\n\n  add(v): V {\n    return new V(Math.round((v.x + this.x) * 10) / 10, Math.round((v.y + this.y) * 10) / 10);\n  }\n\n  subtract(v): V {\n    return new V(Math.round((this.x - v.x) * 10) / 10, Math.round((this.y - v.y) * 10) / 10);\n  }\n\n  scale(s): V {\n    return new V(Math.round((this.x * s) * 10) / 10 , Math.round((this.y * s) * 10) / 10);\n  }\n\n  dot(v) {\n    return (this.x * v.x + this.y * v.y);\n  }\n\n  cross(v) {\n    return (this.x * v.y - this.y * v.x);\n  }\n\n  smalest(v): V {\n    let x = this.x < v.x ? this.x : v.x\n      , y = this.y < v.y ? this.y : v.y;\n    return new V(x, y);\n  }\n\n  biggest(v): V {\n    let x = this.x > v.x ? this.x : v.x\n      , y = this.y > v.y ? this.y : v.y;\n    return new V(x, y);\n  }\n\n  rotate(angle, vector): V {\n    let x = this.x - vector.x;\n    let y = this.y - vector.y;\n\n    let x_prime = vector.x + ((x * Math.cos(angle)) - (y * Math.sin(angle)));\n    let y_prime = vector.y + ((x * Math.sin(angle)) + (y * Math.cos(angle)));\n\n    return new V(x_prime, y_prime);\n  }\n}\n\n\nexport default V;\n"]}