{"version":3,"sources":["../../node_modules/browser-pack/_prelude.js","js/game.ts","../common/Body.ts","../common/Entity.ts","../common/Game.ts","../common/Hitbox.ts","../common/Input.ts","../common/Map.ts","../common/Model.ts","../common/Player.ts","../common/Rectangle.ts","../common/Render.ts","../common/Vector.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Game from \"../../common/Game\";\r\nimport Render from \"../../common/Render\";\r\nimport V from \"../../common/Vector\";\r\nimport Input from \"../../common/Input\";\r\nimport Player from \"../../common/Player\";\r\n\r\nlet game = new Game();\r\nlet input = new Input(game);\r\nlet player = new Player(input, 1);\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  let render = new Render(game, document.body, function() {\r\n    return new V(0, 0);\r\n  });\r\n});\r\n","import V from \"./Vector\";\r\nimport Hitbox from \"./Hitbox\";\r\nimport Model from \"./Model\";\r\n\r\n/** Body class with basic parameters for positon and hitbox, it also provides a function for cehcking collision */\r\nexport default class Body {\r\n  public position: V;\r\n  protected model: Model;\r\n\r\n  /**\r\n   * constructor for Body\r\n   * @param  {V}      positon position where it should be\r\n   * @param  {Hitbox} hitbox  hitbox\r\n   * @return {[type]}         [description]\r\n   */\r\n  constructor(positon: V, model: Model) {\r\n    this.position = positon;\r\n    this.model = model;\r\n  }\r\n\r\n  /**\r\n   * Checks for collsions between two Bodys\r\n   * @param  {Body}   the other body which colsion has to get checked\r\n   * @return {boolean}      returns a boolean if collsion occured\r\n   */\r\n  public checkCollision(body: Body, newPositon: V = this.position): boolean {\r\n    return this.model.checkCollision(body.position, newPositon, body.model);\r\n  }\r\n\r\n\r\n  /**\r\n   * function to draw Texture on canvas on position of body\r\n   * @param  {CanvasRenderingContext2D} ctx Canvas context which we can draw on\r\n   */\r\n  public render(ctx: CanvasRenderingContext2D): void {\r\n    ctx.drawImage(this.model.texture, this.position.x, this.position.y);\r\n  }\r\n}\r\n","import Body from \"./Body\";\r\nimport V from \"./Vector\";\r\nimport Model from \"./Model\";\r\n\r\nexport default class Entity extends Body {\r\n  public velocity: V;\r\n  public force: V;\r\n  private spritePositon: number;\r\n\r\n  constructor(position: V, model: Model, force: V = new V(0, 0), velocity: V = new V(0, 0)) {\r\n    super(position, model);\r\n\r\n    this.velocity = velocity;\r\n    this.force = force;\r\n  }\r\n\r\n  render(ctx: CanvasRenderingContext2D) {\r\n    if (this.spritePositon == undefined || Math.ceil(this.spritePositon) >= this.model.spriteMax) {\r\n      this.spritePositon = 0;\r\n    }\r\n\r\n    // get direction\r\n    let rad = Math.atan2(this.velocity.x, this.velocity.y);\r\n    let a = Math.round(rad * (4 / Math.PI));\r\n    let direction = (a < -0 ? a * (-1) + 4 : a);\r\n    let speed = 0;\r\n    switch (direction) {\r\n      case 0:\r\n        speed = this.velocity.y;\r\n        break;\r\n      case 1:\r\n        speed = (this.velocity.x + this.velocity.y) / 2\r\n        break;\r\n\r\n      case 2:\r\n        speed = this.velocity.x;\r\n        break;\r\n\r\n      case 3:\r\n        speed = (this.velocity.x + (this.velocity.y * -1)) / 2\r\n        break;\r\n\r\n      case 8:\r\n      case 4:\r\n        speed = this.velocity.y * -1\r\n        break;\r\n\r\n      case 5:\r\n        speed = ((this.velocity.x * -1) + this.velocity.y) / 2\r\n        break;\r\n\r\n      case 6:\r\n        speed = this.velocity.x * -1\r\n        break;\r\n\r\n      case 7:\r\n        speed = ((this.velocity.x + this.velocity.y) / 2) * -1\r\n        break;\r\n    }\r\n    this.spritePositon += speed / 1000;\r\n    ctx.drawImage(this.model.texture, this.model.textureSize.x * Math.floor(this.spritePositon), 0, this.model.texture.width/this.model.spriteMax, this.model.texture.height, this.position.x, this.position.y, this.model.textureSize.x, this.model.textureSize.y);\r\n  }\r\n}\r\n","import V from \"./Vector\";\r\nimport Map from \"./Map\";\r\nimport Entity from \"./Entity\";\r\nimport Block from \"./Block\";\r\n\r\n\r\n/** Class representing a point. */\r\nexport default class Game {\r\n  public map: Map;\r\n\r\n  constructor() {\r\n    this.map = new Map();\r\n\r\n\r\n    setInterval(this.gameLoop.bind(this), 16);\r\n  }\r\n\r\n  /**\r\n   * function to handle collisiondetection and movement\r\n   */\r\n  private gameLoop(): void {\r\n    let delay = 16 / 1000;\r\n\r\n\r\n    for (let i = 0; i < this.map.entitys.length; i++) {\r\n      let entity: Entity = this.map.entitys[i];\r\n      if (entity) {\r\n        let acceleration: V = entity.force.scale(2000);\r\n        let friction: number = .92;\r\n\r\n        entity.velocity = entity.velocity.add(acceleration.scale(delay)).scale(friction);\r\n\r\n        // new position (now check for collision)\r\n        let position: V = entity.position.add(entity.velocity.scale(delay));\r\n\r\n        let collision: boolean = false;\r\n\r\n        for (let o = 0; o < this.map.entitys.length; o++) {\r\n          let entity2: Entity = this.map.entitys[o];\r\n          if (entity2 && entity != entity2) {\r\n\r\n            // Collision detection\r\n            if (entity.checkCollision(entity2, position)) {\r\n              collision = true;\r\n            }\r\n          }\r\n        }\r\n\r\n        // sets new position or keeps last depending on collision\r\n        if (collision) {\r\n          entity.velocity = entity.velocity.scale(.1);\r\n        } else {\r\n          entity.position = position;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import V from \"./Vector\";\r\nimport Rectangle from \"./Rectangle\";\r\n\r\nexport default class Hitbox {\r\n  protected rectangles: Array<Rectangle>;\r\n  private collisionBox: Rectangle;\r\n  public test: string;\r\n\r\n\r\n  /**\r\n   * Constructor callculates outer Collision box only requerires one param\r\n   * @param  {Array<Rectangle>} rectangles recatangle out of which the collisionbox constist\r\n   */\r\n  constructor(rectangles: Array<Rectangle>) {\r\n    this.rectangles = rectangles;\r\n    this.collisionBox = this.getCollisionBox();\r\n  }\r\n\r\n  /**\r\n   * checksCollision between two hitboxes, first unaccurate collsision detection\r\n   * then accurate with looping throug all Rectangles\r\n   * @param  {V}      origin       origin of the Hitbox in the lastHitbox parameter\r\n   * @param  {V}      originHitbox origin of the this hitbos, so the caller of the function\r\n   * @param  {Hitbox} hitbox       hitbox to check collision with\r\n   * @return {boolean}             wheter or not a collision occured\r\n   */\r\n  public checkCollision(origin: V, originHitbox: V, hitbox: Hitbox): boolean {\r\n    // unaccurate collisiondetection for performence reasons\r\n    let collisionBox = new Rectangle(this.collisionBox.min.add(originHitbox), this.collisionBox.max)\r\n    let collisionBox2 = new Rectangle(hitbox.collisionBox.min.add(origin), hitbox.collisionBox.max)\r\n    if (collisionBox.checkCollision(collisionBox2)) {\r\n      // accurate collisionsdetection\r\n      for (let i = 0; i < this.rectangles.length; i++) {\r\n        for (let o = 0; o < hitbox.rectangles.length; o++) {\r\n          let otherRect = hitbox.rectangles[o];\r\n          let thisRect = this.rectangles[i];\r\n\r\n          let rect = new Rectangle(thisRect.min.add(originHitbox), thisRect.max);\r\n          let rect2 = new Rectangle(otherRect.min.add(origin), otherRect.max);\r\n\r\n          if (rect.checkCollision(rect2)) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n  /**\r\n   * returns the outer circle of the hitbox so later you only have to check if those collide\r\n   * @return {Rectangle} returns a Rectangle with the outes collsionBox\r\n   */\r\n  private getCollisionBox(): Rectangle {\r\n    let max = new V(0, 0);\r\n\r\n    for (let i = 0; i < this.rectangles.length; i++) {\r\n      let hitbox = this.rectangles[i];\r\n\r\n      max = max.biggest(hitbox.min.add(hitbox.max));\r\n    }\r\n\r\n    let min = new V(max.x, max.y);\r\n\r\n    for (let i = 0; i < this.rectangles.length; i++) {\r\n      min = min.smalest(this.rectangles[i].min);\r\n    }\r\n\r\n    return new Rectangle(min, max);\r\n  }\r\n}\r\n","import V from \"./Vector\";\r\nimport Game from \"./Game\";\r\n\r\nexport default class Input {\r\n  public game: Game;\r\n\r\n  /**\r\n   * Constructor, basic initialisations\r\n   * @param  {Game}   game Game\r\n   */\r\n  constructor(game: Game) {\r\n    this.game = game;\r\n  }\r\n\r\n  /**\r\n   * sets force of entity to vetor at provided index\r\n   * @param {number} index index of entity\r\n   * @param {V}      force new force of entity\r\n   */\r\n  public setForce(index: number, force: V): void {\r\n    this.game.map.entitys[index].force = force;\r\n  }\r\n\r\n  /**\r\n   * updates Entity positon localy\r\n   * @param {number} index    index of entity\r\n   * @param {V}      force    new force of entity\r\n   * @param {V}      velocity new velocity of entity\r\n   * @param {V}      position new position of entity\r\n   */\r\n  public updateEntity(index: number, force: V, velocity: V, position: V): void {\r\n    this.game.map.entitys[index].force = force;\r\n    this.game.map.entitys[index].position = position;\r\n    this.game.map.entitys[index].velocity = velocity;\r\n  }\r\n}\r\n","import Block from \"./Block\";\r\nimport Entity from \"./Entity\";\r\nimport V from \"./Vector\";\r\nimport Model from \"./Model\";\r\nimport Hitbox from \"./Hitbox\";\r\nimport Rectangle from \"./Rectangle\";\r\n\r\nexport default class Map {\r\n  public entitys: Array<Entity>;\r\n  public blocks: Array<Block>;\r\n\r\n  constructor() {\r\n    this.entitys = [\r\n      new Entity(\r\n        new V(20, 20),\r\n        new Model(\r\n          new Hitbox(\r\n            [\r\n              new Rectangle(\r\n                new V(0, 0),\r\n                new V(10, 10),\r\n              ),\r\n            ]\r\n          ),\r\n          \"assets/images/dirt.png\",\r\n          \"dirt\",\r\n          new V(10, 10),\r\n        ),\r\n        new V(0, 0),\r\n      ),\r\n\r\n      new Entity(\r\n        new V(123, 123),\r\n        new Model(\r\n          new Hitbox(\r\n            [\r\n              new Rectangle(\r\n                new V(0, 0),\r\n                new V(16, 18)\r\n              )\r\n            ]\r\n          ),\r\n          \"assets/images/player.png\",\r\n          \"player\",\r\n          new V(16, 18),\r\n          4,\r\n        )\r\n      )\r\n    ];\r\n\r\n    this.blocks = [];\r\n\r\n    console.log(this.entitys);\r\n  }\r\n}\r\n","import V from \"./Vector\";\r\nimport Hitbox from \"./Hitbox\";\r\n\r\n/** Class for model */\r\nexport default class Model {\r\n  public hitbox: Hitbox;\r\n  public texture: HTMLImageElement;\r\n  public name: string;\r\n  public textureSize: V;\r\n  public spriteMax: number;\r\n\r\n  /**\r\n   * Constructor\r\n   * @param  {Hitbox} hitbox  Hitbox of Model\r\n   * @param  {string} texture Url of texture\r\n   * @param  {string} name    name of the model\r\n   * @param  {V}      textureSize Vector of size of the model\r\n   * @param  {number} spriteMax maximum distance the sprite should go\r\n   */\r\n  constructor(hitbox: Hitbox, texture: string, name: string, textureSize: V, spriteMax: number = 1) {\r\n    this.hitbox = hitbox;\r\n    this.name = name;\r\n    this.textureSize = textureSize;\r\n    this.spriteMax = spriteMax;\r\n    this.texture = new Image();\r\n    this.texture.src = texture;\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks for collsions between two Bodys\r\n   * @param  {Body}   the other body which colsion has to get checked\r\n   * @return {boolean}      returns a boolean if collsion occured\r\n   */\r\n  public checkCollision(origin: V, originHitbox: V, model: Model): boolean {\r\n    return this.hitbox.checkCollision(origin, originHitbox, model.hitbox);\r\n  }\r\n}\r\n","import Entity from \"./Entity\";\r\nimport V from \"./Vector\";\r\nimport Input from \"./Input\"\r\n\r\ninterface keys {\r\n  w: false,\r\n  a: false,\r\n  s: false,\r\n  d: false,\r\n}\r\n\r\n/** Player for user input and much more */\r\nexport default class Player {\r\n  public input: Input;\r\n  private keys: keys;\r\n\r\n  /**\r\n   * Constructor for player, initialises listeners\r\n   * @param  {Input}  input Needs class input to send input to\r\n   * @param  {number} index index of player entity\r\n   */\r\n  constructor(input: Input, index: number) {\r\n    this.input = input;\r\n    let date: number = Date.now();\r\n\r\n    this.keys = {\r\n      w: false,\r\n      a: false,\r\n      s: false,\r\n      d: false,\r\n    };\r\n\r\n    window.addEventListener('keydown', (e) => {\r\n      if (this.keys.hasOwnProperty(e.key)) {\r\n        this.keys[e.key] = true;\r\n\r\n        this.input.setForce(index, this.getDirection(this.keys));\r\n\r\n        e.preventDefault();\r\n      }\r\n    });\r\n\r\n    window.addEventListener('keyup', (e) => {\r\n      if (this.keys.hasOwnProperty(e.key)) {\r\n        this.keys[e.key] = false;\r\n\r\n        this.input.setForce(index, this.getDirection(this.keys));\r\n\r\n        e.preventDefault();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * gets direction from pressed keys\r\n   * @param  {keys} keys Object of pressed keys\r\n   * @return {V}         Vector of direction keys ar going\r\n   */\r\n  private getDirection(keys: keys): V {\r\n    let v = new V(0, 0);\r\n\r\n    if (this.keys.w) {\r\n      v.y-- ;\r\n    }\r\n\r\n    if (this.keys.a) {\r\n      v.x--;\r\n    }\r\n\r\n    if (this.keys.s) {\r\n      v.y++;\r\n    }\r\n\r\n    if (this.keys.d) {\r\n      v.x++;\r\n    }\r\n\r\n    return v;\r\n  }\r\n}\r\n","import V from \"./Vector\";\r\n\r\n/** Rectangle class with relative position and size */\r\nexport default class Rectangle {\r\n  public min: V;\r\n  public max: V;\r\n\r\n  /**\r\n   * Creates a Rectangle from two vectors\r\n   * @param  {V}      min relative position of the rectangle\r\n   * @param  {V}      max size of the rectangle measured from first param\r\n   */\r\n  constructor(min: V, max: V) {\r\n    this.min = min;\r\n    this.max = max;\r\n  }\r\n\r\n\r\n  /**\r\n   * Checks collision between two rectangles\r\n   * @param  {V}         origin     origin of rectange provided as 3. param\r\n   * @param  {V}         originRect origin of own rectangle\r\n   * @param  {Rectangle} rect       Rectangle to check collision with\r\n   * @return {boolean}              wheater or wheater not they collided\r\n   */\r\n  public checkCollision(rect: Rectangle): boolean {\r\n    let rectMin = rect.min;\r\n    let thisMin = this.min;\r\n\r\n    if (thisMin.x < rectMin.x + rect.max.x && this.max.x + thisMin.x > rectMin.x && thisMin.y < rect.max.y + rectMin.y && this.max.y + thisMin.y > rectMin.y) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import Game from \"./Game\";\r\n\r\n/** render class */\r\nexport default class Render {\r\n  private game: Game;\r\n  private canvas: HTMLCanvasElement;\r\n  private context: CanvasRenderingContext2D;\r\n\r\n  /**\r\n   * constructor for render, creates canvas, attaches eventlisteners for size, creates renderinterval\r\n   * @param  {Game}        game              game with map and stuff\r\n   * @param  {HTMLElement} canvasParent      parent of canvas on which canvas gets appended\r\n   * @param  {Function}    getRenderPosition function which returns vector which offset it needs\r\n   */\r\n  constructor(game: Game, canvasParent: HTMLElement, getRenderPosition: Function) {\r\n    this.canvas = document.createElement('canvas');\r\n    canvasParent.appendChild(this.canvas);\r\n\r\n    this.context = this.canvas.getContext('2d');\r\n    this.game = game;\r\n\r\n\r\n    this.canvas.height = document.documentElement.clientHeight;\r\n    this.canvas.width = document.documentElement.clientWidth;\r\n\r\n\r\n    window.addEventListener('resize', () => {\r\n      this.canvas.width = document.documentElement.clientWidth;\r\n      this.canvas.height = document.documentElement.clientHeight;\r\n    });\r\n\r\n    setInterval(this.renderLoop.bind(this), 16);\r\n  }\r\n\r\n  /**\r\n   * Renderloop, goes throug all blocks and entitys and draws them on canvas\r\n   */\r\n  private renderLoop(): void {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n\r\n    for (let i = 0; i < this.game.map.blocks.length; i++) {\r\n      this.game.map.blocks[i].render(this.context);\r\n    }\r\n\r\n    for (let i = 0; i < this.game.map.entitys.length; i++) {\r\n      this.game.map.entitys[i].render(this.context);\r\n    }\r\n  }\r\n}\r\n","interface position {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/** Class representing a point. */\r\nexport default class V {\r\n  public x: number;\r\n  public y: number;\r\n\r\n  /**\r\n   * Create a point.\r\n   * @param {number} x - The x value.\r\n   * @param {number} y - The y value.\r\n   */\r\n  constructor (x: position | number, y?: number) {\r\n    if (typeof(x) == \"object\") {\r\n      this.x = Math.round(x.x * 10) / 10;\r\n      this.y = Math.round(x.y * 10) / 10;\r\n    } else {\r\n      this.x = Math.round(x * 10) / 10;\r\n      this.y = Math.round(y * 10) / 10;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * adds x and y from other vector to this vector and returns a new Vector\r\n   * @param  {V} vector Vector to add from\r\n   * @return {V}        new Vector with result\r\n   */\r\n  add(vector: V): V {\r\n    return new V(Math.round((vector.x + this.x) * 10) / 10, Math.round((vector.y + this.y) * 10) / 10);\r\n  }\r\n\r\n  /**\r\n   * subtracts x and y from other vector to this vector and returns a new Vector\r\n   * @param  {V} vector Vector which subtracts\r\n   * @return {V}        new Vector with result\r\n   */\r\n  subtract(vector: V): V {\r\n    return new V(Math.round((this.x - vector.x) * 10) / 10, Math.round((this.y - vector.y) * 10) / 10);\r\n  }\r\n\r\n  /**\r\n   * scales x and y with a specific number and returns a new Vector\r\n   * @param  {number} s [description]\r\n   * @return {V}        [description]\r\n   */\r\n  scale(s: number): V {\r\n    return new V(Math.round((this.x * s) * 10) / 10 , Math.round((this.y * s) * 10) / 10);\r\n  }\r\n\r\n  /**\r\n   * returns the dot product of both vectors\r\n   * @param  {V}      vector second vector\r\n   * @return {number}        the dot product\r\n   */\r\n  dot(vector: V): number {\r\n    return (this.x * vector.x + this.y * vector.y);\r\n  }\r\n\r\n\r\n  /**\r\n   * returns the cross product of both vetors\r\n   * @param  {V}      vector second vector\r\n   * @return {number}        the cross product\r\n   */\r\n  cross(vector: V) {\r\n    return (this.x * vector.y - this.y * vector.x);\r\n  }\r\n\r\n  /**\r\n   * returns the smalest values of both vectors\r\n   * @param  {V} vector other vector\r\n   * @return {V}        vector with the smalest x and y coordinates\r\n   */\r\n  smalest(vector: V): V {\r\n    let x = this.x < vector.x ? this.x : vector.x\r\n      , y = this.y < vector.y ? this.y : vector.y;\r\n    return new V(x, y);\r\n  }\r\n\r\n\r\n  /**\r\n   * returns the smalest values of both vectors\r\n   * @param  {V} vector other vector\r\n   * @return {V}        vector with the smalest x and y coordinates\r\n   */\r\n  biggest(vector: V): V {\r\n    let x = this.x > vector.x ? this.x : vector.x\r\n      , y = this.y > vector.y ? this.y : vector.y;\r\n    return new V(x, y);\r\n  }\r\n\r\n  /**\r\n   * rotates the vector at the position of the specified vector with the provided\r\n   * angle and returns vector with new positon\r\n   * @param  {number} angle  the angle it should rotate\r\n   * @param  {V}      vector the rotation vector\r\n   * @return {V}             the roated vector\r\n   */\r\n  rotate(angle: number, vector: V): V {\r\n    let x = this.x - vector.x;\r\n    let y = this.y - vector.y;\r\n\r\n    let x_prime = vector.x + ((x * Math.cos(angle)) - (y * Math.sin(angle)));\r\n    let y_prime = vector.y + ((x * Math.sin(angle)) + (y * Math.cos(angle)));\r\n\r\n    return new V(x_prime, y_prime);\r\n  }\r\n}\r\n"]}