{"version":3,"sources":["../node_modules/browser-pack/_prelude.js","js/Classes/Communicator.ts","js/Classes/Entity.ts","js/Classes/Game.ts","js/Classes/Hitbox.ts","js/Classes/Input.ts","js/Classes/Model.ts","js/Classes/Rectangle.ts","js/Classes/Render.ts","js/Classes/Vector.ts","js/game.ts"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Vector_1","Communicator","game","_this","this","websocket","WebSocket","onopen","send","onerror","error","console","log","onmessage","data","JSON","parse","action","updateMovement","params","loadStaticElements","loadMovingElements","prototype","_a","arrayPosition","force","entitys","default","param","loadMap","sendInput","v","stringify","Object","defineProperty","value","Entity","_b","positionX","_c","positionY","model","texture","solid","static","position","velocity","renderTexture","ctx","undefined","lastSprite","spriteMax","rad","Math","atan2","x","y","round","PI","direction","speed","save","translate","drawImage","textureSize","floor","restore","Model_1","Entity_1","Game","config","height","map","width","models","name","addEntity","expectedInterval","window","performance","now","gameLoopInterval","setTimeout","gameLoop","bind","entity","push","specialInput","overtime","overtimeError","delay","acceleration","scale","add","collision","entity2","hitbox","checkCollision","exportMap","returnValue","Rectangle_1","Hitbox","hitboxconf","hitboxes","collisionBox","getCollisionBox","origin","eOrigin","eHitbox","max","biggest","min","smalest","Input","communicator","player","keys","w","d","ArrowUp","ArrowLeft","ArrowDown","ArrowRigth","__proto__","addEventListener","hasOwnProperty","key","preventDefault","Hitbox_1","Model","staticElem","Rectangle","_d","_e","h","originRect","rect","rectMin","thisMin","drawRect","fillStyle","fillRect","Render","canvasParent","debugging","canvas","document","createElement","documentElement","clientHeight","clientWidth","appendChild","style","imageRendering","getContext","name_1","img","Image","textures","src","setInterval","render","clearRect","i_1","V","subtract","dot","cross","rotate","angle","vector","x_prime","cos","sin","y_prime","Game_1","Communicator_1","Render_1","Input_1","CONFIG","textureBasepath","dirt","house","duck","input","body","renderHitbox"],"mappings":"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","file":"bundle.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","import Game from \"./Game\";\r\nimport V from \"./Vector\";\r\n/**\r\n * Errorhandling for Client Server has its own...\r\n * Websocket here\r\n *\r\n */\r\nclass Communicator {\r\n  websocket: WebSocket;\r\n  game: Game\r\n\r\n  constructor(game) {\r\n    this.websocket = new WebSocket('ws://localhost');\r\n\r\n    this.websocket.onopen = () => {\r\n      this.websocket.send('Ping');\r\n    };\r\n\r\n    // Log errors\r\n    this.websocket.onerror = (error) => {\r\n      console.log('WebSocket Error ' + error);\r\n    };\r\n\r\n    // Log messages from the server\r\n    this.websocket.onmessage = (e) => {\r\n      // console.log(e.data);\r\n      try {\r\n        let data = JSON.parse(e.data);\r\n        switch (data.action) {\r\n          case \"updateMovement\":\r\n            this.updateMovement(data.params);\r\n            break;\r\n          case \"loadStaticElements\":\r\n            this.loadStaticElements(data.params);\r\n            break;\r\n          case \"loadMovingElements\":\r\n            this.loadMovingElements(data.params);\r\n            break;\r\n          }\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    this.game = game;\r\n    // game.__proto__.overtimeError = (overtime) => {\r\n    //   // console.log(overtime);\r\n    //   // console.log(this);\r\n    //   this.expectedInterval = window.performance.now();\r\n    //   // this.loadMap();\r\n    // };\r\n  }\r\n\r\n  /**\r\n   * sets force to force on arrayPosition\r\n   * @param {number} arrayPosition - position in Array\r\n   * @param {vector} force - new Force value\r\n   */\r\n  updateMovement({arrayPosition: arrayPosition, force: force}) {\r\n    this.game.entitys[arrayPosition].force = new V(force);\r\n    // console.log(this.game.entitys[arrayPosition]);\r\n  }\r\n\r\n  /**\r\n   * Initialises static Elements which cant move\r\n   * @param\r\n   */\r\n  loadStaticElements(param) {\r\n\r\n  }\r\n\r\n\r\n  loadMovingElements(param) {\r\n\r\n  }\r\n\r\n  loadMap() {\r\n\r\n  }\r\n\r\n\r\n\r\n  sendInput(v) {\r\n    this.websocket.send(JSON.stringify(v));\r\n  }\r\n}\r\n\r\nexport default Communicator;\r\n","import Model from \"./Model\";\r\nimport V from \"./Vector\";\r\n\r\nclass Entity {\r\n  model: Model;\r\n  force: V;\r\n  velocity: V;\r\n  position: V;\r\n  lastSprite: number;\r\n\r\n  constructor({positionX = 0, positionY = 0, texture = 0, solid = false, static: staticElem = false, model: model}) {\r\n    // position\r\n    // left top of hitbox\r\n    this.position = new V(positionX, positionY);\r\n\r\n    // velocity for movement\r\n    this.velocity = new V(0, 0);\r\n\r\n    // pulls into Direction\r\n    this.force = new V(0, 0);\r\n\r\n    // IDEA: z-index\r\n\r\n    // Textures and rest is safed in here\r\n    this.model = model;\r\n  }\r\n\r\n  renderTexture(ctx) {\r\n    if (this.lastSprite == undefined || this.lastSprite >= this.model.spriteMax) {\r\n      this.lastSprite = 0;\r\n    }\r\n\r\n    // get direction\r\n    let rad = Math.atan2(this.velocity.x, this.velocity.y);\r\n    let a = Math.round(rad * (4 / Math.PI));\r\n    let direction = (a < -0 ? a * (-1) + 4 : a);\r\n    let speed = 0;\r\n    switch (direction) {\r\n      case 0:\r\n        speed = this.velocity.y;\r\n        break;\r\n      case 1:\r\n        speed = (this.velocity.x + this.velocity.y) / 2\r\n        break;\r\n\r\n      case 2:\r\n        speed = this.velocity.x;\r\n        break;\r\n\r\n      case 3:\r\n        speed = (this.velocity.x + (this.velocity.y * -1)) / 2\r\n        break;\r\n\r\n      case 8:\r\n      case 4:\r\n        speed = this.velocity.y * -1\r\n        break;\r\n\r\n      case 5:\r\n        speed = ((this.velocity.x * -1) + this.velocity.y) / 2\r\n        break;\r\n\r\n      case 6:\r\n        speed = this.velocity.x * -1\r\n        break;\r\n\r\n      case 7:\r\n        speed = ((this.velocity.x + this.velocity.y) / 2) * -1\r\n        break;\r\n    }\r\n\r\n\r\n    this.lastSprite += speed / 500;\r\n    // get direction\r\n    // get speed into direction\r\n    // Get texture\r\n    // Add to last sprite\r\n    // render\r\n\r\n    ctx.save();\r\n\r\n    // add center to it so it can rotate from center\r\n    // ctx.translate(this.position.x + this.center.x, this.position.y + this.center.y);\r\n    ctx.translate(this.position.x, this.position.y);\r\n    // ctx.rotate(this.angle);\r\n\r\n    ctx.drawImage(this.model.texture, this.model.textureSize.x * Math.floor(this.lastSprite), 0, this.model.textureSize.x, this.model.textureSize.y, 0, 0, this.model.textureSize.x, this.model.textureSize.y);\r\n    // ctx.drawImage(this.texture, 0 - this.center.x, 0 - this.center.y, this.size.x, this.size.y);\r\n    ctx.restore();\r\n  }\r\n}\r\n\r\nexport default Entity;\r\n","import Model from \"./Model\";\r\nimport Entity from \"./Entity\";\r\n/**\r\n * Class for game logic\r\n * @author Pascal Luginbühl\r\n * @version none\r\n */\r\nclass Game {\r\n  models: Object;\r\n  config: any;\r\n  height: number;\r\n  width: number;\r\n  entitys: Array<Entity>\r\n  expectedInterval: number;\r\n  /** Creates game\r\n   * @param {object} config - Config file\r\n   */\r\n  constructor(config) {\r\n    this.config = config;\r\n\r\n    // Map starting corner left bottom, render left top\r\n    // IDEA: Chunks for more performence\r\n\r\n    this.height = config.map.height;\r\n    this.width = config.map.width;\r\n    this.entitys = [];\r\n\r\n\r\n    this.models = {};\r\n    for (var name in this.config.models) {\r\n      this.models[name] = new Model(this.config.models[name]);\r\n    }\r\n\r\n\r\n    this.addEntity(new Entity({\r\n      positionX: 300,\r\n      positionY: 70,\r\n\r\n      model: this.models['duck'],\r\n    }));\r\n\r\n    this.addEntity(new Entity({\r\n      positionX: 0,\r\n      positionY: 0,\r\n\r\n      model: this.models['house'],\r\n    }));\r\n\r\n    this.addEntity(new Entity({\r\n      positionX: 700,\r\n      positionY: 700,\r\n\r\n      model: this.models['house'],\r\n    }));\r\n\r\n\r\n    // Timer for gameloop\r\n    this.expectedInterval = window.performance.now() + this.config.gameLoopInterval;\r\n    setTimeout(this.gameLoop.bind(this), this.config.gameLoopInterval);\r\n  }\r\n\r\n\r\n  addEntity (entity) {\r\n    this.entitys.push(entity);\r\n  }\r\n\r\n  // catch up loop\r\n  gameLoop() {\r\n    // special for communicator and input\r\n    this.specialInput();\r\n\r\n    let overtime = window.performance.now() - this.expectedInterval;\r\n\r\n    if (overtime > this.config.gameLoopInterval) {\r\n      this.overtimeError(overtime);\r\n      this.expectedInterval = window.performance.now();\r\n      // error, overtime longer then Interval, sync with server...\r\n    }\r\n\r\n    let delay = (overtime + this.config.gameLoopInterval) / 1000;\r\n    // console.log(delay);\r\n\r\n    // physics here\r\n    for (let i = 0; i < this.entitys.length; i++) {\r\n      let entity = this.entitys[i];\r\n      if (!entity.model.static) {\r\n\r\n        let acceleration = entity.force.scale(2000);\r\n        // idk wahts betta\r\n        // let friction = 0.08;\r\n        let friction = 0.8;\r\n        // entity.velocity = entity.velocity.add(acceleration.subtract(entity.velocity.scale(friction)));\r\n        entity.velocity = entity.velocity.add(acceleration.scale(delay)).scale(.92);\r\n        // console.log(entity.velocity);\r\n        let position = entity.position.add(entity.velocity.scale(delay));\r\n        // let rect = new Rectangle({min: entity.hitbox.min.add(entity.velocity.scale(delay)), max: entity.hitbox.max});\r\n        // velocity += acceleration * time_step\r\n        // position += velocity * time_step\r\n\r\n        let collision = false;\r\n\r\n        // collisions\r\n        for (let o = 0; o < this.entitys.length; o++) {\r\n          let entity2 = this.entitys[o];\r\n          // check collision\r\n\r\n          if (entity != entity2 && entity.model.solid && entity2.model.solid) {\r\n\r\n            // FIXME: do better physX\r\n            // Collision detection\r\n            if (entity.model.hitbox.checkCollision(position, entity2.position, entity2.model.hitbox)) {\r\n              collision = true;\r\n            }\r\n          }\r\n        }\r\n\r\n\r\n        if (collision) {\r\n          entity.velocity = entity.velocity.scale(.1);\r\n        } else {\r\n          entity.position = position;\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    this.expectedInterval += this.config.gameLoopInterval;\r\n    setTimeout(this.gameLoop.bind(this), this.config.gameLoopInterval - overtime);\r\n  }\r\n\r\n  overtimeError(overtime) {\r\n    console.error(\"overtimeError: \" + overtime);\r\n  }\r\n\r\n  specialInput() {\r\n\r\n  }\r\n\r\n  exportMap() {\r\n    let returnValue = [];\r\n    for (var i = 0; i < this.entitys.length; i++) {\r\n      let entity = this.entitys[i];\r\n\r\n      for (let model in this.models) {\r\n        if (this.models[model] == entity.model) {\r\n          returnValue.push({position: entity.position, velocity: entity.velocity, force: entity.force, model: model});\r\n        }\r\n      }\r\n    }\r\n    return returnValue;\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import V from \"./Vector\";\r\nimport Rectangle from \"./Rectangle\";\r\n\r\nclass Hitbox {\r\n  hitboxes: Array<Rectangle>;\r\n  collisionBox: Rectangle;\r\n\r\n  constructor(hitboxconf) {\r\n    this.hitboxes = [];\r\n    for (let i = 0; i < hitboxconf.length; i++) {\r\n      this.hitboxes.push(new Rectangle(hitboxconf[i]));\r\n    }\r\n\r\n    this.collisionBox = this.getCollisionBox();\r\n  }\r\n\r\n  checkCollision(origin, eOrigin, eHitbox) {\r\n    if (this.collisionBox.checkCollision(origin, eOrigin, eHitbox.collisionBox)) {\r\n      for (let i = 0; i < this.hitboxes.length; i++) {\r\n        let hitboxes = this.hitboxes[i];\r\n\r\n        for (let o = 0; o < eHitbox.hitboxes.length; o++) {\r\n\r\n          if (hitboxes.checkCollision(origin, eOrigin, eHitbox.hitboxes[o])) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  getCollisionBox() {\r\n    let max = new V(0, 0);\r\n\r\n    for (let i = 0; i < this.hitboxes.length; i++) {\r\n      let hitbox = this.hitboxes[i];\r\n\r\n      max = max.biggest(hitbox.min.add(hitbox.max));\r\n    }\r\n\r\n    let min = new V(max.x, max.y);\r\n\r\n    for (let i = 0; i < this.hitboxes.length; i++) {\r\n      min = min.smalest(this.hitboxes[i].min);\r\n    }\r\n\r\n    return new Rectangle({min: min, max: max});\r\n  }\r\n}\r\n\r\nexport default Hitbox;\r\n","import Game from \"./Game\";\r\nimport Communicator from \"./Communicator\";\r\nimport Entity from \"./Entity\";\r\nimport V from \"./Vector\";\r\n/**\r\n * Input for user inputs.\r\n * Communicator for communicating to WebSocket\r\n */\r\nclass Input {\r\n  game: Game\r\n  communicator: Communicator;\r\n  player: Entity;\r\n  keys: any;\r\n\r\n  constructor(game, communicator) {\r\n    this.game = game;\r\n    this.communicator = communicator;\r\n\r\n    this.player = new Entity({\r\n      positionX: 300,\r\n      positionY: 300,\r\n\r\n      model: this.game.models['duck'],\r\n    });\r\n\r\n    this.game.addEntity(this.player);\r\n    console.log(this.player);\r\n    this.keys = {\r\n      w: false,\r\n      a: false,\r\n      s: false,\r\n      d: false,\r\n      ArrowUp: false,\r\n      ArrowLeft: false,\r\n      ArrowDown: false,\r\n      ArrowRigth: false,\r\n    }\r\n\r\n\r\n    let keys = this.keys;\r\n    let player = this.player\r\n    game.__proto__.specialInput = function() {\r\n      // let v = new V(0, 0);\r\n      // if (keys.w) {\r\n      //   v.y-- ;\r\n      // }\r\n      // if (keys.a) {\r\n      //   v.x--;\r\n      // }\r\n      // if (keys.s) {\r\n      //   v.y++;\r\n      // }\r\n      // if (keys.d) {\r\n      //   v.x++;\r\n      // }\r\n      // player.force = v;\r\n    }\r\n\r\n    window.addEventListener('keydown', (e) => {\r\n      if (this.keys.hasOwnProperty(e.key)) {\r\n        this.keys[e.key] = true;\r\n        this.player.force = this.direction();\r\n\r\n        this.communicator.sendInput({action: \"updateMovement\",  params: {arrayPosition: 3, force: this.direction()}});\r\n        e.preventDefault();\r\n      }\r\n    });\r\n\r\n    window.addEventListener('keyup', (e) => {\r\n      if (this.keys.hasOwnProperty(e.key)) {\r\n        this.keys[e.key] = false;\r\n        this.player.force = this.direction();\r\n\r\n        this.communicator.sendInput({action: \"updateMovement\",  params: {arrayPosition: 3, force: this.direction()}});\r\n        e.preventDefault();\r\n      }\r\n    });\r\n  }\r\n\r\n  direction() {\r\n    let v = new V(0, 0);\r\n    if (this.keys.w) {\r\n      v.y-- ;\r\n    }\r\n    if (this.keys.a) {\r\n      v.x--;\r\n    }\r\n    if (this.keys.s) {\r\n      v.y++;\r\n    }\r\n    if (this.keys.d) {\r\n      v.x++;\r\n    }\r\n    return v;\r\n  }\r\n}\r\nexport default Input;\r\n","import Hitbox from \"./Hitbox\";\r\n\r\nclass Model {\r\n  solid: boolean;\r\n  static: boolean;\r\n  hitbox: Hitbox;\r\n  spriteMax: number;\r\n  texture: any;\r\n  textureSize: any;\r\n\r\n  constructor({solid: solid = true, static: staticElem = false, hitbox: hitbox}) {\r\n    // this.hitbox = [new Rectangle({x: 0, y: 0, w: 10, h: 10})];\r\n\r\n\r\n    // comes to renderengine\r\n    // IDEA: Also able to set via reference to type\r\n    // this.texture = texture;\r\n    // this.textureSize = new V(10, 10);\r\n\r\n    // FIXME: Fix inputs from config\r\n    // parameters\r\n    this.solid = solid;\r\n    this.static = staticElem;\r\n\r\n    this.hitbox = new Hitbox(hitbox);\r\n  }\r\n}\r\n\r\nexport default Model;\r\n","import V from \"./Vector\";\r\n\r\nclass Rectangle {\r\n  max: V;\r\n  min: V;\r\n\r\n  constructor({x: x = 0, y: y = 0, w: w = 0, h: h = 0, min: min, max: max}) {\r\n    if (min != undefined && max != undefined) {\r\n      this.min = min;\r\n      this.max = max;\r\n    } else {\r\n      this.min = new V(x, y);\r\n      this.max = new V(w, h);\r\n    }\r\n    // this._rotation = 0;\r\n    // let rotation = 5;\r\n    // this.center = new V(0, 0);\r\n  }\r\n\r\n  // get rotation() {\r\n  //   console.log(rotation, \"asd\");\r\n  //   return rotation;\r\n  // }\r\n\r\n  // set rotation(rotation) {\r\n  //   this._rotation = rotation;\r\n  // }\r\n\r\n  checkCollision(origin, originRect, rect) {\r\n    let rectMin = rect.min.add(originRect);\r\n\r\n    // let thisMin = rect.min.add(origin).add(rect.min);\r\n    let thisMin = this.min.add(origin);\r\n\r\n    if (thisMin.x < rectMin.x + rect.max.x && this.max.x + thisMin.x > rectMin.x && thisMin.y < rect.max.y + rectMin.y && this.max.y + thisMin.y > rectMin.y) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  drawRect(position, ctx) {\r\n    ctx.save();\r\n\r\n    // add center to it so it can rotate from center\r\n    // ctx.translate(this.position.x + this.center.x, this.position.y + this.center.y);\r\n    position = position.add(this.min);\r\n    ctx.translate(position.x, position.y);\r\n    // ctx.rotate(this.angle);\r\n    ctx.fillStyle = \"rgba(0, 0, 0, .3)\";\r\n    ctx.fillRect(0, 0, this.max.x, this.max.y);\r\n\r\n    // ctx.drawImage(this.texture, 0 - this.center.x, 0 - this.center.y, this.size.x, this.size.y);\r\n    ctx.restore();\r\n  };\r\n}\r\n\r\nexport default Rectangle;\r\n","import Game from \"./Game\";\r\nimport V from \"./Vector\";\r\nimport Entity from \"./Entity\";\r\nimport Rectangle from \"./Rectangle\";\r\n\r\n\r\nclass Render {\r\n  canvas: any;\r\n  ctx: CanvasRenderingContext2D;\r\n  origin: any;\r\n  game: Game;\r\n  debugging: any;\r\n\r\n\r\n  constructor(game, canvasParent, debugging, origin) {\r\n\r\n    this.canvas = document.createElement('canvas');\r\n    this.canvas.height = this.canvas.height = document.documentElement.clientHeight;\r\n    this.canvas.width = this.canvas.width = document.documentElement.clientWidth;\r\n\r\n    canvasParent.appendChild(this.canvas);\r\n\r\n    this.canvas.style.imageRendering = \"pixelated\";\r\n\r\n    this.ctx = this.canvas.getContext(\"2d\");\r\n\r\n    this.origin = origin;\r\n\r\n    // preload images\r\n    this.game = game;\r\n\r\n    this.debugging = debugging;\r\n\r\n\r\n    for (let name in this.game.models) {\r\n      let img = new Image();\r\n      let texture = this.game.config.textures[name];\r\n\r\n      img.src = \"assets/images/\" + texture.texture;\r\n\r\n      this.game.models[name].spriteMax = texture.spriteMax;\r\n      this.game.models[name].texture = img;\r\n      this.game.models[name].textureSize = new V(texture.w, texture.h);\r\n    }\r\n\r\n    window.addEventListener('resize', () => {\r\n      this.canvas.width = document.documentElement.clientWidth;\r\n      this.canvas.height = document.documentElement.clientHeight;\r\n    });\r\n\r\n\r\n\r\n\r\n    // this.render();\r\n    // setTimeout(this.render.bind(this), 1);\r\n\r\n    // standard Interval\r\n    setInterval(this.render.bind(this), Math.round(1000 / 60));\r\n  }\r\n\r\n\r\n  render() {\r\n    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    this.ctx.save();\r\n    this.ctx.translate(this.origin.position.x * -1 + this.canvas.width/2, this.origin.position.y * -1 + this.canvas.height/2);\r\n    // Clear old stuff\r\n\r\n\r\n    for (let i = 0; i < this.game.entitys.length; i++) {\r\n      let entity = this.game.entitys[i];\r\n\r\n      entity.renderTexture(this.ctx);\r\n      for (let i = 0; i < entity.model.hitbox.hitboxes.length; i++) {\r\n        entity.model.hitbox.hitboxes[i].drawRect(entity.position, this.ctx);\r\n      }\r\n    }\r\n    this.ctx.restore();\r\n  }\r\n}\r\nexport default Render;\r\n","class V {\r\n  x: number;\r\n  y: number;\r\n\r\n\r\n\r\n  constructor (x, y?) {\r\n    if (x instanceof Object) {\r\n      this.x = Math.round(x.x * 10) / 10;\r\n      this.y = Math.round(x.y * 10) / 10;\r\n    } else {\r\n      this.x = Math.round(x * 10) / 10;\r\n      this.y = Math.round(y * 10) / 10;\r\n    }\r\n  }\r\n\r\n  add(v) {\r\n    return new V(Math.round((v.x + this.x) * 10) / 10, Math.round((v.y + this.y) * 10) / 10);\r\n  }\r\n\r\n  subtract(v) {\r\n    return new V(Math.round((this.x - v.x) * 10) / 10, Math.round((this.y - v.y) * 10) / 10);\r\n  }\r\n\r\n  scale(s) {\r\n    return new V(Math.round((this.x * s) * 10) / 10 , Math.round((this.y * s) * 10) / 10);\r\n  }\r\n\r\n  dot(v) {\r\n    return (this.x * v.x + this.y * v.y);\r\n  }\r\n\r\n  cross(v) {\r\n    return (this.x * v.y - this.y * v.x);\r\n  }\r\n\r\n  smalest(v) {\r\n    let x = this.x < v.x ? this.x : v.x\r\n      , y = this.y < v.y ? this.y : v.y;\r\n    return new V(x, y);\r\n  }\r\n\r\n  biggest(v) {\r\n    let x = this.x > v.x ? this.x : v.x\r\n      , y = this.y > v.y ? this.y : v.y;\r\n    return new V(x, y);\r\n  }\r\n\r\n  rotate(angle, vector) {\r\n    let x = this.x - vector.x;\r\n    let y = this.y - vector.y;\r\n\r\n    let x_prime = vector.x + ((x * Math.cos(angle)) - (y * Math.sin(angle)));\r\n    let y_prime = vector.y + ((x * Math.sin(angle)) + (y * Math.cos(angle)));\r\n\r\n    return new V(x_prime, y_prime);\r\n  }\r\n}\r\n\r\n\r\nexport default V;\r\n","import Game from \"./Classes/Game\";\r\nimport Communicator from \"./Classes/Communicator\";\r\nimport Render from \"./Classes/Render\";\r\nimport Input from \"./Classes/Input\";\r\n\r\n'use strict'\r\n// IDEA: Circle collision\r\n// IDEA: z-index\r\n// IDEA: collision side\r\n// IDEA: Pathfinding\r\n// IDEA: sprites\r\n// IDEA: Players controller\r\n// IDEA: collsion speedup (AABB detection with outer part\r\n// FIXME: Outer colisionbox\r\n\r\nconst CONFIG = {\r\n  gameLoopInterval: 16,\r\n\r\n  map: {\r\n    height: 1000,\r\n    width: 1000,\r\n  },\r\n\r\n  textureBasepath: 'assets/images/',\r\n  textures: {\r\n    'dirt': {\r\n      texture: 'dirt.png',\r\n      w: 16,\r\n      h: 16,\r\n      spriteMax: 5,\r\n    },\r\n    'house': {\r\n      texture: 'house.png',\r\n      w: 254,\r\n      h: 198,\r\n      spriteMax: 1,\r\n    },\r\n    'duck': {\r\n      texture: 'player.png',\r\n      w: 16,\r\n      h: 18,\r\n      spriteMax: 4,\r\n    },\r\n  },\r\n\r\n  models: {\r\n    'dirt': {\r\n      solid: true,\r\n      static: false,\r\n      hitbox: [{\r\n        x: 0,\r\n        y: 0,\r\n        w: 16,\r\n        h: 16,\r\n      }],\r\n    },\r\n    'house': {\r\n      solid: true,\r\n      static: true,\r\n      hitbox: [{\r\n        x: 0,\r\n        y: 0,\r\n        w: 254,\r\n        h: 198,\r\n      }],\r\n    },\r\n    'duck': {\r\n      solid: true,\r\n      static: false,\r\n      hitbox: [{\r\n        x: 0,\r\n        y: 0,\r\n        w: 18,\r\n        h: 18,\r\n      }],\r\n    }\r\n  },\r\n}\r\n\r\n\r\nlet game = new Game(CONFIG);\r\nlet communicator = new Communicator(game);\r\nlet input = new Input(game, communicator);\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n  let render = new Render(game, document.body, {\r\n    renderHitbox: true\r\n  }, input.player);\r\n});\r\n"],"sourceRoot":"/source/"}